version: '3.8'

services:
  # PostgreSQL Database with pgvector
  postgres:
    image: pgvector/pgvector:pg16
    container_name: secondbrain-postgres
    environment:
      POSTGRES_DB: secondbrain
      POSTGRES_USER: secondbrain
      POSTGRES_PASSWORD: secondbrain_password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.max=10000
      -c pg_stat_statements.track=all
      -c log_statement=all
      -c log_duration=on
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - secondbrain-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U secondbrain -d secondbrain"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Database initializer - ensures tables exist
  db-init:
    image: pgvector/pgvector:pg16
    container_name: secondbrain-db-init
    environment:
      PGHOST: postgres
      PGUSER: secondbrain
      PGPASSWORD: secondbrain_password
      PGDATABASE: secondbrain
    volumes:
      - ./database/init-scripts:/init-scripts
    networks:
      - secondbrain-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"
    command: >
      bash -c "
      echo 'Checking database tables...' &&
      TABLE_COUNT=$$(psql -tAc \"SELECT COUNT(*) FROM information_schema.tables WHERE table_schema='public' AND table_type='BASE TABLE';\") &&
      echo \"Found $$TABLE_COUNT tables\" &&
      if [ \"$$TABLE_COUNT\" -lt \"4\" ]; then
        echo 'Creating database schema...' &&
        for script in /init-scripts/*.sql; do
          echo \"Running $$script...\" &&
          psql < \"$$script\"
        done &&
        echo 'Database initialization complete!'
      else
        echo 'Database tables already exist'
      fi
      "

  # FastAPI Backend
  backend:
    build: ./backend
    container_name: secondbrain-backend
    working_dir: /app
    environment:
      - DATABASE_URL=postgresql+asyncpg://secondbrain:secondbrain_password@postgres:5432/secondbrain
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_OPENAI_API_VERSION=${AZURE_OPENAI_API_VERSION}
      - AZURE_OPENAI_DEPLOYMENT_NAME=${AZURE_OPENAI_DEPLOYMENT_NAME}
      - AZURE_MINI_DEPLOYMENT_NAME=${AZURE_MINI_DEPLOYMENT_NAME}
      - AZURE_OPENAI_EMBEDDING_DEPLOYMENT_NAME=${AZURE_OPENAI_EMBEDDING_DEPLOYMENT_NAME}
      - SECRET_KEY=${SECRET_KEY}
      # - CORS_ORIGINS=http://localhost:5173,http://frontend:5173
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - uploads:/app/uploads
    networks:
      - secondbrain-network
    depends_on:
      postgres:
        condition: service_healthy
      db-init:
        condition: service_completed_successfully
    restart: unless-stopped
    # command: sleep infinity
    command: ./startup.sh
    # command: >
    #   bash -c "
    #     apt-get update && apt-get install -y gcc curl &&
    #     pip install -r requirements.txt &&
    #     python run.py
    #   "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # SvelteKit Frontend
  frontend:
    image: node:24-slim
    container_name: secondbrain-frontend
    working_dir: /app
    environment:
      - NODE_ENV=development
    ports:
      - "5174:5173"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    networks:
      - secondbrain-network
    depends_on:
      - backend
      - db-init
    restart: unless-stopped
    # command: sleep infinity
    command: >
      bash -c "
        npm install &&
        npm run dev -- --host 0.0.0.0
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Optional: pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: secondbrain-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: tobias.pitters@gmail.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - secondbrain-network
    restart: unless-stopped
    volumes:
      - pgadmin_data:/var/lib/pgadmin

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  backend_venv:
    driver: local
  frontend_node_modules:
    driver: local
  uploads:
    driver: local

networks:
  secondbrain-network:
    driver: bridge